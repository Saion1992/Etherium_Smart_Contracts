pragma solidity ^0.8.0;

contract GreedyBanker{
    uint constant fee = 1000 wei;

    mapping(address => uint) balances;
    mapping(address => uint) public depositCount;

    uint public feesCollected;

    address owner;

    constructor() {
        owner = msg.sender;
    }

    receive() external payable {
        uint depositFee;
        if (depositCount[msg.sender] >= 1){
            require(msg.value >= fee, "Deposit Failed");
            depositFee = fee;
        }
        balances[msg.sender] += msg.value;
        balances[msg.sender] -= depositFee;
        depositCount[msg.sender]++;
        feesCollected += depositFee;
    }

    fallback() external payable {
        feesCollected += msg.value;
    }

    function withdraw(uint amount) external {
        require(balances[msg.sender] >= amount,"Insufficient Funds");
        balances[msg.sender] -= amount;
        (bool sent,) = payable(msg.sender).call{value:amount}("");
        require(sent, "Payment Failed");
    }

    function collectFees() external {
        require(owner == msg.sender, "You are not the owner");
        uint totalFees = feesCollected;
        feesCollected = 0;
        (bool sent,) = payable(owner).call{value:totalFees}("");
        require(sent, "transfer failed");
    }

    function getBalance() public view returns(uint){
        return balances[msg.sender];
    }
}
